require "rss/maker"
module ForRSS
  include ActionView::Helpers::TextHelper
  include ActionView::Helpers::TagHelper
  include ActionView::Helpers::SanitizeHelper
  
  include ApplicationHelper

  def rss
    # rss = RSS::Maker.make("1.0") do |maker|
    #   maker.channel.about = url_for(:action => "rss")
    #   maker.channel.title = APPLICATION_TITLE
    #   maker.channel.link = url_for(:action => "index")
    #   maker.channel.description = "#{APPLICATION_TITLE} feeds generated by RSS::Maker"
    #   Article.find(:all, :order => "modified_at desc", :limit => 30).each do |article|
    #     item = maker.items.new_item
    #     item.title = article.subject
    #     item.date = article.modified_at || Time.now
    #     item.link = url_for(:action => "show", :id => article)
    #     item.description = truncate(strip_tags(article.body).to_a.map{|e|e.strip}.join(" "), 80)
    #     item.content_encoded = html_escape(article_simple_format(article.body))
    #     item.dc_creator = article.user ? article.user.login : 'anonymouse'
    #   end
    # end
    headers["Content-Type"] = "application/xml; charset=UTF-8"
    render :text => "not implemented yet", :layout => false
  end
end

class ArticlesController < ApplicationController
  before_filter :login_required, :except => [:index]
  
  extend ActionView::Helpers::SanitizeHelper::ClassMethods
  include ForRSS
  
  def index
    @articles = Article.paginate :page => params['page'], 
      :per_page => params[:limit] || 30, :order => 'updated_at DESC'
  end
  
  def new
    @article = Article.new
    [:subject, :body, :url].each do |name|
      @article[name] = params[name].to_s.strip
    end
    render :action => :edit
  end
  
  def update
    if params[:id].blank?
      @article = Article.new :modified_at => Time.now
      status = "投稿"
    else
      status = "更新"
      @article = Article.find(params[:id])
    end
    @before_article = @article.dup
    @article.attributes = params[:article]
    @article.user ||= current_user
    Article.transaction {
      unless @article.save
        render :action => "edit"
        return
      end
    }
    Mailman.deliver_article_update(self, Time.now, :article => {:before => @before_article, :after => @article})
    flash[:notice] = "#{status}しました。"
    flash[:notice_duration] = 0.8
    redirect_to :action => "list"
  end
  
  def edit
    @article = Article.find(params[:id])
  end
end
