#!/bin/sh
# -*- compile-command: "ls" -*-
# グローバルなlighttpd設定
#
# デバッグ
# lighttpd -t -f /home/ikeda/etc/lighttpd.conf
# lighttpd -D -f /home/ikeda/etc/lighttpd.conf
#
# sudo rm -f /var/lock/subsys/lighttpd
#
# デーモン起動
# sudo /etc/rc.d/init.d/lighttpd restart
#
# 何かのエラーが起きたときは debug.log.* を enable に設定して
# /var/log/lighttpd/error_log を参照すること。
#

# 使用モジュール
server.modules = (
                  "mod_rewrite",
                  "mod_access",
                  "mod_fastcgi",

                  "mod_redirect",
                  "mod_auth",   # Basic認証など
                  "mod_status",
                  "mod_cgi",    # 普通のCGI用
                  "mod_accesslog",

                  "mod_alias",
                  # "mod_setenv",
                  # "mod_proxy",
                  # "mod_simple_vhost",
                  # "mod_evhost",
                  # "mod_userdir",
                  # "mod_compress",
                  # "mod_ssi",
                  # "mod_usertrack",
                  # "mod_expire",
                  # "mod_secdownload",
                  # "mod_rrdtool",
                 )

## a static document-root, for virtual-hosting take look at the
## server.virtual-* options

server.name = "localhost"

# ディレクトリを指定された場合に参照する暗黙のファイル(順番が重要)
server.indexfiles = (
                     "dispatch.fcgi",
                     "index.php",
                     "index.html",
                     "index.htm",
                     "default.htm",
                     "index.rb",
                     "index.rbx",
                     "index.rhtml",
                     )

mimetype.assign = (
".css"   =>  "text/css",
".gif"   =>  "image/gif",
".htm"   =>  "text/html",
".html"  =>  "text/html",
".jpeg"  =>  "image/jpeg",
".jpg"   =>  "image/jpeg",
".js"    =>  "text/javascript",
".png"   =>  "image/png",
".swf"   =>  "application/x-shockwave-flash",
".txt"   =>  "text/plain"
)

# Use the "Content-Type" extended attribute to obtain mime type if possible
# mimetypes.use-xattr        = "enable"

## send a different Server: header
## be nice and keep it at lighttpd
#server.tag                 = "lighttpd"

# ログ
accesslog.filename          = "/var/log/lighttpd/access_log"
server.errorlog             = "/var/log/lighttpd/error_log"


# 見られたくないファイル
url.access-deny = ("~", ".inc")


######### Options that are good to be but not neccesary to be changed #######

# ポート番号(デフォルト80)
server.port = 5000

# bind to localhost (default: all interfaces)
# server.bind = "localhost" とすると $HTTP["host"] == "rubynetnavi" が false になってしまうので注意
#
# server.bind = "xt8"

## error-handler for status 404
#server.error-handler-404   = "/error-handler.html"
#server.error-handler-404   = "/error-handler.php"

# /etc/rc.d/init.d/lighttpd でデーモンを殺すときの使用する pid ファイル。
# ここを rc ファイルと一致させないとはまる。
# server.pid-file = "/var/run/lighttpd.pid"

###### virtual hosts
##
##  If you want name-based virtual hosting add the next three settings and load
##  mod_simple_vhost
##
## document-root =
##   virtual-server-root + virtual-server-default-host + virtual-server-docroot
## or
##   virtual-server-root + http-host + virtual-server-docroot
##
#simple-vhost.server-root   = "/home/weigon/wwwroot/servers/"
#simple-vhost.default-host  = "grisu.home.kneschke.de"
#simple-vhost.document-root = "/pages/"

#simple-vhost.server-root = "/home/ikeda/src/"
#simple-vhost.default-host = "ttclub"
#simple-vhost.document-root = "public"


##
## Format: <errorfile-prefix><status-code>.html
## -> ..../status-404.html for 'File not found'
#server.errorfile-prefix    = "/home/weigon/projects/lighttpd/doc/status-"

# デフォルトではディレクトリリスト表示を抑制する
server.dir-listing = "enable"

# DEBUG
# debug.log-request-header   = "enable"
# debug.log-response-header  = "enable"
# debug.log-request-handling = "enable"
# debug.log-file-not-found   = "enable"



### only root can use these options
#
# chroot() to directory (default: no chroot())
#server.chroot              = "/"

# 実行するユーザーとグループ
# server.username            = "apache"
# server.groupname           = "apache"

#### compress module
#compress.cache-dir         = "/tmp/lighttpd/cache/compress/"
#compress.filetype          = ("text/plain", "text/html")

#### proxy module
## read proxy.txt for more info
#proxy.server               = (".php" =>
#                               ("localhost" =>
#                                 (
#                                   "host" => "192.168.0.101",
#                                   "port" => 80
#                                )
#                              )
#                            )

#### fastcgi module
## read fastcgi.txt for more info
#fastcgi.server             = (".php" =>
#                               ("localhost" =>
#                                 (
#                                   "socket" => "/tmp/php-fastcgi.socket",
#                                   "bin-path" => "/usr/local/bin/php"
#                                )
#                              )
#                           )




#### SSL engine
#ssl.engine                 = "enable"
#ssl.pemfile                = "server.pem"


# mod_status - サーバーの環境を表示
status.status-url = "/server-status" # アクセス数や起動時間を調べられる
status.config-url = "/server-config" # どのモジュールをロードしているかわかる


#### auth module
## read authentification.txt for more info

# Apacheと同じようなBasic認証の方法

## debugging
# 0 for off, 1 for 'auth-ok' messages, 2 for verbose debugging
# auth.debug = 0
# auth.backend                   = "htpasswd"
# auth.backend.htpasswd.userfile = "/home/ikeda/.htpasswd"





# auth.backend.plain.userfile = "lighttpd.user"
# auth.backend.plain.groupfile = "lighttpd.group"

# auth.backend.ldap.hostname = "localhost"
# auth.backend.ldap.base-dn  = "dc=my-domain,dc=com"
# auth.backend.ldap.filter   = "(uid=$)"

# IPで直接アクセスされたときの認証
# auth.require = (
#                 "/" => (
#                         "method"  => "basic",
#                         "realm"   => "public_html access",
#                         "require" => "valid-user"
#                         ),
#                 "/orange" => (
#                               "method"  => "basic",
#                               "realm"   => "orange access",
#                               "require" => "valid-user"
#                               ),
#                 )


# auth.require               = ("/server-status" =>
#                                (
#                                  "method"  => "digest",
#                                  "realm"   => "download archiv",
#                                  "require" => "group=www|user=ikeda|host=192.168.1.12"
#                               ),
#                                "/server-info" =>
#                                (
#                                  "method"  => "digest",
#                                  "realm"   => "download archiv",
#                                  "require" => "group=www|user=ikeda|host=192.168.1.12"
#                               )
#                             )
#

#### url handling modules (rewrite, redirect, access)
#url.rewrite                = ("^/$"             => "/server-status")
#url.redirect               = ("^/wishlist/(.+)" => "http://www.123.org/$1")

#
# define a pattern for the host url finding
# %% => % sign
# %0 => domain name + tld
# %1 => tld
# %2 => domain name without tld
# %3 => subdomain 1 name
# %4 => subdomain 2 name
#
#evhost.path-pattern        = "/home/storage/dev/www/%3/htdocs/"

#### expire module
#expire.url                 = ("/buggy/" => "access 2 hours", "/asdhas/" => "access plus 1 seconds 2 minutes")

#### ssi
#ssi.extension              = (".shtml")

#### rrdtool
#rrdtool.binary             = "/usr/bin/rrdtool"
#rrdtool.db-name            = "/var/www/lighttpd.rrd"

#### setenv
#setenv.add-request-header  = ("TRAV_ENV" => "mysql://user@host/db")
#setenv.add-response-header = ("X-Secret-Message" => "42")



# url.rewrite = ("^/$" => "index.html", "^([^.]+)$" => "$1.html")
server.error-handler-404 = "/dispatch.fcgi"


server.document-root = "/home/ikeda/rails/memo_station/current/public"
fastcgi.server = (".fcgi" =>
                    ("memo_station" =>
                       (
                        "min-procs" => 1,
                        "max-procs" => 1,
                        "socket"   => "/tmp/fcgi.memo_station.socket",
                        "bin-path" => "/home/ikeda/rails/memo_station/current/public/dispatch.fcgi",
                        "bin-environment" => ("RAILS_ENV" => "production"),
                        )
                     )
                  )

# # プライベートディレクトリ
# # これはポート80から除外して完全にローカルにする。
# # $SERVER["socket"] は http:/(この部分)/ がそのまま入ってくるようだ。
# # private を hosts で 192.168.1.12 で定義し、
# # "private:8200" と比較している場合には http://private:8200/ でマッチする。
# # そのとき http://192.168.1.12:8200/ でアクセスしても "private:8200" とはマッチしないので見れない。
# # 2005-10-03
# $SERVER["socket"] == "127.0.0.1:5020" {
#   server.document-root = "/home/ikeda/private_html"
#   server.dir-listing = "enable"
# }
# $SERVER["socket"] == "xt8:5020" {
#   server.document-root = "/home/ikeda/private_html"
#   server.dir-listing = "enable"
# }

# ファイル拡張子連動実行
# cgi.assign = (
#               ".rb"    => "/usr/local/bin/ruby",
#               ".rbx"   => "/usr/bin/eruby",
#               ".rhtml" => "/usr/local/bin/erb",
#               ".pl"    => "/usr/bin/perl",
#               ".cgi"   => "/usr/bin/perl",
#               )

### Local Variables: ***
### mode: ruby ***
### coding: euc-jp ***
### End: ***
